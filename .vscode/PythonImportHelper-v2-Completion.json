[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "main_1",
        "description": "main_1",
        "isExtraImport": true,
        "detail": "main_1",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "quickstart",
        "description": "quickstart",
        "isExtraImport": true,
        "detail": "quickstart",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "quickstart",
        "description": "quickstart",
        "isExtraImport": true,
        "detail": "quickstart",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "password",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "user_name",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "Event",
        "description": "Event",
        "isExtraImport": true,
        "detail": "Event",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "InstalledAppFlow",
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "isExtraImport": true,
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "HttpError",
        "importPath": "googleapiclient.errors",
        "description": "googleapiclient.errors",
        "isExtraImport": true,
        "detail": "googleapiclient.errors",
        "documentation": {}
    },
    {
        "label": "login_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login_page():\n    global login_Obj\n    if request.method == 'POST' or request.method == 'PUT':\n        if request.method == 'POST':\n            data = request.get_json()\n            event_list = []\n            code = ''\n            login_Obj = login(data['email'], data['password'], code, event_list)\n            if(login_Obj.checkInfo() == False):\n                return jsonify({'status': 'failLogin', 'message': 'failLogin'})",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nlogin_Obj = None\n@app.route('/', methods=['GET', 'POST','PUT'])\ndef login_page():\n    global login_Obj\n    if request.method == 'POST' or request.method == 'PUT':\n        if request.method == 'POST':\n            data = request.get_json()\n            event_list = []\n            code = ''",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_Obj",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_Obj = None\n@app.route('/', methods=['GET', 'POST','PUT'])\ndef login_page():\n    global login_Obj\n    if request.method == 'POST' or request.method == 'PUT':\n        if request.method == 'POST':\n            data = request.get_json()\n            event_list = []\n            code = ''\n            login_Obj = login(data['email'], data['password'], code, event_list)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "user_name",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "user_name = '22120123@student.hcmus.edu.vn'\npassword = 'Hung12345'\ninput_string = \"helloIamHungnehihihelloIamHunghahihihelloIamHungkhenhihi\"\nstart_marker = \"Hung\"\nend_marker = \"hihi\"\nprint(input_string.find(\"hr\"))",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "password = 'Hung12345'\ninput_string = \"helloIamHungnehihihelloIamHunghahihihelloIamHungkhenhihi\"\nstart_marker = \"Hung\"\nend_marker = \"hihi\"\nprint(input_string.find(\"hr\"))",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "input_string = \"helloIamHungnehihihelloIamHunghahihihelloIamHungkhenhihi\"\nstart_marker = \"Hung\"\nend_marker = \"hihi\"\nprint(input_string.find(\"hr\"))",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "start_marker",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "start_marker = \"Hung\"\nend_marker = \"hihi\"\nprint(input_string.find(\"hr\"))",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "end_marker",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "end_marker = \"hihi\"\nprint(input_string.find(\"hr\"))",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "Event",
        "description": "Event",
        "peekOfCode": "class Event:\n    def __init__(self, header='', content='', date = '', start_time='', end_time=''):\n        self.header = header\n        self.content = content\n        self.start_time = start_time\n        self.end_time = end_time\n        self.date = date",
        "detail": "Event",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 6,
        "importPath": "main_1",
        "description": "main_1",
        "peekOfCode": "class login():\n    def __init__(self, user_name, password, code, event_list = []):\n        self.user_name = user_name\n        self.password = password\n        self.event_list = event_list\n        self.code = code\n        driver = webdriver.Chrome()\n        # options = webdriver.ChromeOptions()\n        # options.add_argument('--headless')\n        # options.add_argument('--disable-gpu')  # To avoid an error message in some environments",
        "detail": "main_1",
        "documentation": {}
    },
    {
        "label": "event_exists",
        "kind": 2,
        "importPath": "quickstart",
        "description": "quickstart",
        "peekOfCode": "def event_exists(service, calendar_id, event_data):\n    events = service.events().list(\n        calendarId=calendar_id,\n        timeMin=event_data[\"start\"][\"dateTime\"],\n        timeMax=event_data[\"end\"][\"dateTime\"],\n        singleEvents=True,\n    ).execute()\n    return \"items\" in events and len(events[\"items\"]) > 0\ndef main(event_list, summary):\n    creds = None",
        "detail": "quickstart",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "quickstart",
        "description": "quickstart",
        "peekOfCode": "def main(event_list, summary):\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists(\"token.json\"):\n        creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:",
        "detail": "quickstart",
        "documentation": {}
    },
    {
        "label": "SCOPES",
        "kind": 5,
        "importPath": "quickstart",
        "description": "quickstart",
        "peekOfCode": "SCOPES = [\"https://www.googleapis.com/auth/calendar\"]\ndef event_exists(service, calendar_id, event_data):\n    events = service.events().list(\n        calendarId=calendar_id,\n        timeMin=event_data[\"start\"][\"dateTime\"],\n        timeMax=event_data[\"end\"][\"dateTime\"],\n        singleEvents=True,\n    ).execute()\n    return \"items\" in events and len(events[\"items\"]) > 0\ndef main(event_list, summary):",
        "detail": "quickstart",
        "documentation": {}
    }
]